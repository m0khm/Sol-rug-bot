
# src/main.py

import os
import certifi

# –£–∫–∞–∑—ã–≤–∞–µ–º Python SSL –∏ requests –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–Ω–µ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ certifi
os.environ.setdefault("SSL_CERT_FILE", certifi.where())
os.environ.setdefault("REQUESTS_CA_BUNDLE", certifi.where())

import asyncio
import logging
import json
import base64

from dotenv import load_dotenv
from twitter_watcher import TwitterWatcher   # snscrape-based implementation
from ai_summarizer import AISummarizer
from ai_image_generator import AIImageGenerator
from ticker_generator import generate_ticker
from pump_client import PumpClient
from telegram_notifier import TelegramNotifier

async def handle_tweet(tweet, summarizer, img_gen, pump, notifier):
    text = tweet["text"]
    url  = f"https://twitter.com/{tweet['author_username']}/status/{tweet['id']}"
    logging.info(f"–ù–æ–≤—ã–π —Ç–≤–∏—Ç: {url}")

    # 1) –°–∂–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
    summary = await summarizer.summarize(text)

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    image_url = (await img_gen.generate(summary))[0]
    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞: {image_url}")

    # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä –∏ –∏–º—è —Ç–æ–∫–µ–Ω–∞
    ticker = generate_ticker(summary)
    name   = summary.title()

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–¥–∏—Ä—É–µ–º –∏—Ö –≤ data URI
    metadata = {
        "name":         name,
        "symbol":       ticker,
        "description":  summary,
        "external_url": url,
        "image":        image_url
    }
    md_b64 = base64.b64encode(json.dumps(metadata).encode()).decode()
    metadata_uri = f"data:application/json;base64,{md_b64}"

    # 5) –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω on-chain —á–µ—Ä–µ–∑ Pump.fun
    result = await pump.create_token(name=name, symbol=ticker, uri=metadata_uri)
    logging.info(f"–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {result}")

    # 6) –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
    notifier.notify(
        text=(
            f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω *{name}* (`${ticker}`)\n"
            f"[‚ñ∂Ô∏è –¢–≤–∏—Ç]({url})  [üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞]({image_url})\n"
            f"Tx: https://solscan.io/tx/{result['tx']}"
        ),
        parse_mode="Markdown"
    )

async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)s | %(message)s"
    )
    logging.getLogger("snscrape").setLevel(logging.INFO)
    load_dotenv()

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ —Ç–≤–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ snscrape (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    poll_interval = int(os.getenv("TWEET_POLL_INTERVAL", "60"))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º watcher (snscrape-based)
    watcher    = TwitterWatcher(poll_interval=poll_interval)

    summarizer = AISummarizer(os.getenv("OPENAI_API_KEY"))
    img_gen    = AIImageGenerator(os.getenv("OPENAI_API_KEY"))
    pump       = PumpClient()
    chat_ids   = [cid.strip() for cid in os.getenv("TELEGRAM_CHAT_IDS", "").split(",") if cid.strip()]
    notifier   = TelegramNotifier(os.getenv("TELEGRAM_BOT_TOKEN"), chat_ids)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–≤–∏—Ç—ã
    async for tweet in watcher.stream_tweets():
        asyncio.create_task(handle_tweet(tweet, summarizer, img_gen, pump, notifier))

if __name__ == "__main__":
    asyncio.run(main())
